@startuml
title Strategy Pattern
namespace HeadFirst.DesignPatterns{
    note as StrategyPatternDefine
    <b>策略模式</b>
    定义了算法族，分别封装起来，
    让它们之间可以互相替换，
    此模式让算法的变化独立于使用算法的客户

    <b>OO 原则</b>
    封装变化
    多用组合，少用继承
    针对接口编程，不针对实现编程

    <b>要点</b>
    *知道OO基础，并不是以让你设计出良好的OOk系统
    *良好的OO设计必须具备可复用、可扩充、可维护三个特性
    *模式可以让我们建造出具有良好OO设计质量的系统
    *模式被认为是历经验证的OO设计经验
    *模式不是代码，而是针对设计问题的通用解决方案。你可把它们应用到特定的应用中。
    *模式不是被发明，而是被发现。
    *大多数的模式和原则，都着眼于软件变化的主题
    *大多数的模式都允许系统局部改变独立于其它部分
    *我们常系统中会变化的部分抽出来封装。
    *模式让开发人员之间有共享的语言，能够最大化沟通的价值
    end note
    rectangle 客户{
        MallardDuck -up-|> Duck
        RedHeadDuck -up-|> Duck
        RubberDuck -up-|> Duck
        DecoyDuck -up-|> Duck
        ModelDuck -up-|> Duck
        abstract class Duck
        {
            - IFlyBehavior _flyBehavior
            - IQuackBehavior _quackBehavior
            + void Swim()
            + void PerformQuack()
            + void PerformFly()
            + {abstract} void Display()
            + void SetFlyBehavior(IFlyBehavior flyBehavior)
            + void SetQuackBehavior(IQuackBehavior quackBehavior)
        }
        class MallardDuck
        {
            + void Display()
        }
        class RedHeadDuck
        {
            + void Display()
        }
        class RubberDuck
        {
            + void Display()
        }
        class DecoyDuck
        {
            + void Display()
        }
        class ModelDuck
        {
            + void Display()
        }
    }
    rectangle 封装飞行行为{
        Duck -up-> IFlyBehavior
        FlyWithWings .down.|> IFlyBehavior
        FlyNoWay .down.|> IFlyBehavior
        FlyRocketPowered .down.|> IFlyBehavior
        interface IFlyBehavior
        {
            + void Fly()
        }
        class FlyWithWings
        {
            + void Fly()
        }
        class FlyRocketPowered
        {
            + void Fly()
        }
        class FlyNoWay
        {
            + void Fly()
        }
        note as FlysNote
        这些“算法”是可以互换的
        end note
        FlysNote .. FlyWithWings
        FlysNote .. FlyRocketPowered
        FlysNote .. FlyNoWay
    }
    rectangle 封装呱呱叫行为{
        Duck -up-> IQuackBehavior
        Quack .down.|> IQuackBehavior
        Squeak  .down.|> IQuackBehavior
        MuteQuack .down.|> IQuackBehavior
        FakeQuack .down.|> IQuackBehavior
        interface IQuackBehavior
        {
            + void Quack()
        }
        class Quack
        {
            + void Quack()
        }
        class Squeak
        {
            + void Quack()
        }
        class MuteQuack
        {
            + void Quack()
        }
        class FakeQuack
        {
            + void Quack()
        }
        note as QuacksNote
        这些“算法”是可以互换的
        end note
        QuacksNote .. Quack
        QuacksNote .. Squeak
        QuacksNote .. MuteQuack
        QuacksNote .. FakeQuack
    }
    note as AlgorithmGroupNote
    把每组行为想象成一个算法族
    end note
    AlgorithmGroupNote .. 封装呱呱叫行为
    AlgorithmGroupNote .. 封装飞行行为
}
@enduml
@startuml
title Template Method Pattern
namespace HeadFirst.DesignPatterns.TemplateMethod{
    note as TemplateMethodPatternDefine
    <b>模板方法模式</b>
    在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。
    模板方法使得子类可以在不改变算法结构的情况下，
    重新定义算法中的某些步骤。

    <b>OO 原则</b>
    别调用我们，我们会调用你。

    <b>要点</b>
    *“模板方法”定义算法的步骤，把这些步骤的实现延迟到子类
    *模板方法模式为我们提供了一种代码复用的重要技巧
    *模板方法的抽象类可以定义具体方法、抽象方法和钩子。
    *抽象方法由子类实现。
    *钩子是一种方法，它在抽象类中不做事，或者只做默认的事情，
    子类可以选择要不要去覆盖它。
    *为了防止子类改变模板方法中的算法，可以将模板方法声明为final.
    *好莱坞原则告诉我们，将决策权放在高层模块中，
    以便决定如何以及何时调用低层模块。
    *你将在真实世界代码中看到模板方法模式的许多变体，
    不要期待它们全都是一眼就可以被你认出的。
    *策略模式和模板方法模式都封装算法，一个用组合，
    一个用继承
    *工厂方法是模板方法的一种特殊版本
    end note

    CoffeeWithHook -up-|> CaffeineBeverageWithHook
    TeaWithHook -up-|> CaffeineBeverageWithHook

    abstract class CaffeineBeverageWithHook
    {
        + void PrepareRecipe()
        + {abstract} void Brew()
        + {abstract} void AddCondiments()
        + void BoilWater()
        + void PourInCup()
        + bool CustomerWantsCondiments()
    }

    note as CaffeineBeverageWithHookNote
    这个抽象的包含了模板方法PrepareRecipe()
    还包含一个勾子方法CustomerWantsCondiments()
    它能控制冲泡法的算法，只有在需要子类实现某个方法时，
    才调用子类
    end note

    CaffeineBeverageWithHookNote .. CaffeineBeverageWithHook

    class CoffeeWithHook
    {
        + void Brew()
        + void AddCondiments()
        + bool CustomerWantsCondiments()
    }

    class TeaWithHook 
    {
        + void Brew()
        + void AddCondiments()
        + bool CustomerWantsCondiments()
    }

    note as ChildrenNote
    这些子类只简单用来提供一些实现细节
    如果没有先被调用，绝对不会直接调用抽象类
    end note

    ChildrenNote .up. CoffeeWithHook
    ChildrenNote .up. TeaWithHook
}
@enduml
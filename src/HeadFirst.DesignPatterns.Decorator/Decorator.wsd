@startuml
title Decorator Pattern
namespace HeadFirst.DesignPatterns.Decorator{
    note as Decorator
    <b>装饰者模式</b>
    动态地将责任附加到对象上。
    若要扩展功能，
    装饰者提供了比继承更有弹性的替代方案。

    <b>OO 原则</b>
     对扩展开放，对修改关闭

    <b>要点</b>
    *继承属于扩展形式之一，
       但不见得是达到弹性设计的最佳方式
    *在我们的设计中，应该允许行为可以被扩展，
       而无须修改现有的代码
    *组合和委托可用于在运行时动态地加上新的行为
    *除了继承，装饰者模式也可以让我们扩展行为
    *装饰者模式意味着一群装饰者类，
       这些类用来包装具体组件
    *装饰类类反映出被装饰的组件类型
       (事实上，他们具有相同的类型，
        都经过接口或继承实现)
    *装饰者可以在被装饰者的行为前面
       与后面加上自己的行为，
       甚至将被装饰者的行为整个取代掉，
       而达到特定的目的
    *你可以用无数个装饰者包装一个组件
    *装饰者一般对组件的客户是透明的，
      除非客户程序依赖于组件的具体类型
    *装饰者会导致设计中出现许多小对象，
      如果过度使用，会让程序变得很复杂
    end note

    HouseBlend -up-|> Beverage
    DarkRoast -up-|> Beverage
    Espresso -up-|> Beverage
    Decaf -up-|> Beverage
    CondimentDecorator -up-|> Beverage
    CondimentDecorator -up-> Beverage
    Milk -up-|> CondimentDecorator
    Mocha -up-|> CondimentDecorator
    Soy -up-|> CondimentDecorator
    Whip -up-|> CondimentDecorator

    abstract class Beverage
    {
        # string description
        + string GetDescription()
        + {abstract} decimal Cost()
    }

    class HouseBlend
    {
        + decimal Cost()
    }
    class DarkRoast
    {
        + decimal Cost()
    }
    class Espresso
    {
        + decimal Cost()
    }
    class Decaf
    {
        + decimal Cost()
    }
    abstract class CondimentDecorator
    {
        + {abstract} string GetDescription()
    }
    class Milk
    {
        + string GetDescription()
    }
    class Mocha
    {
        + string GetDescription()
    }
    class Soy
    {
        + string GetDescription()
    }
    class Whip
    {
        + string GetDescription()
    }
}
@enduml
@startuml
title Command Pattern
namespace HeadFirst.DesignPatterns.Command{
    note as CommandPatternDefine
    <b>命令模式</b>
    将“请求”封装成对象，以便使用不同的请求、队列或日志来参数化其他对象，
    命令模式也支持可撤销的操作。

    <b>要点</b>
    *命令模式将发出请求的对象和执行请求的对象解耦
    *在被解耦的两者之间是通过命令对象进行沟通的。
    命令对象封装了接收者和一个或一组动作
    *调用者通过调用命令对象的Execute()发出请求，
    这会使得接收者的动作被调用。
    *调用者可以接受命令当做参数，甚至在运行时动态地进行
    *命令可以支持撤销，做法是实现一个Undo()方法来回
    Execute()被执行前的状态。
    *宏命令是命令的一种简单的延伸，允许调用多个命令。
    宏方法也可以支持撤销。
    *实际操作时，很常见使用“聪明”命令对象，也就是直接实现
    了请求，而不是将工作委托给接收者。
    *命令也可以用来实现日志和事务系统。
    end note
    CeilingFanHighCommand .up.|> ICommand
    CeilingFanMediumCommand .up.|> ICommand
    CeilingFanOffCommand .up.|> ICommand
    HottubOffCommand .up.|> ICommand
    HottubOnCommand .up.|> ICommand
    LightOffCommand .up.|> ICommand
    LightOnCommand .up.|> ICommand
    LivingroomLightOffCommand .up.|> ICommand
    LivingroomLightOnCommand .up.|> ICommand
    MacroCommand .up.|> ICommand
    NoCommand .up.|> ICommand
    StereoOffCommand .up.|> ICommand
    StereoOnCommand .up.|> ICommand
    StereoOnWithCDCommand .up.|> ICommand
    TVOffCommand .up.|> ICommand
    TVOnCommand .up.|> ICommand
    CeilingFanHighCommand ..> CeilingFan
    CeilingFanMediumCommand ..> CeilingFan
    CeilingFanOffCommand ..> CeilingFan
    HottubOffCommand ..> Hottub
    HottubOnCommand ..> Hottub
    LightOffCommand ..> Light
    LightOnCommand ..> Light
    LivingroomLightOffCommand ..> Light
    LivingroomLightOnCommand ..> Light
    StereoOffCommand ..> Stereo
    StereoOnCommand ..> Stereo
    StereoOnWithCDCommand ..> Stereo
    TVOffCommand ..> TV
    TVOnCommand ..> TV
    RemoteControl ..>ICommand
    interface ICommand
    {
        + void Execute();
        + void Undo();
    }

    class CeilingFan
    {
        + const int HIGH = 3;
        + const int MEDIUM = 2;
        + const int LOW = 1;
        + const int OFF = 0;

        + CeilingFan(string location)
        + void High()
        + void Medium()
        + void Low()
        + void Off()
    }

    class CeilingFanHighCommand
    {
        + CeilingFanHighCommand(CeilingFan ceilingFan);
        + void Execute();
        + void Undo();
    }

    class CeilingFanMediumCommand
    {
        + CeilingFanMediumCommand(CeilingFan ceilingFan);
        + void Execute();
        + void Undo();
    }

    class CeilingFanOffCommand
    {
        + CeilingFanOffCommand(CeilingFan ceilingFan);
        + void Execute();
        + void Undo();
    }

    class Hottub
    {
        + void On()
        + void Off()
        + void Circulate()
        + void JetsOn()
        + void JetsOff()
        + void SetTemperature(int temperature)
    }

    class HottubOffCommand
    {
        + HottubOffCommand(Hottub hottub)

        + void Execute()
        + void Undo()
    }
    class HottubOnCommand
    {
        + HottubOnCommand(Hottub hottub)

        + void Execute()
        + void Undo()
    }
    class Light
    {
        + int Level
        + Light(string location)

        + void On()
        + void Off()
        + void Dim(int level)
    }
    class LightOffCommand
    {
        + LightOffCommand(Light light)
        + void Execute()
        + void Undo()
    }
    class LightOnCommand
    {
        + LightOnCommand(Light light)
        + void Execute()
        + void Undo()
    }
    class LivingroomLightOffCommand
    {
        + LivingroomLightOffCommand(Light light)
        + void Execute()
        + void Undo()
    }
    class LivingroomLightOnCommand
    {
        + LivingroomLightOnCommand(Light light)
        + void Execute()
        + void Undo()
    }
    class MacroCommand
    {
        + MacroCommand(ICommand[] commands)
        + void Execute()
        + void Undo()
    }
    class NoCommand
    {
        + void Execute()
        + void Undo()
    }
    class RemoteControl
    {
        - ICommand[] _onCommands;
        - ICommand[] _offCommands;
        - ICommand _undoCommand;

        + RemoteControl()
        + void SetCommand(int slot, ICommand onCommand, ICommand offCommand)
        + void OnButtonWasPushed(int slot)
        + void OffButtonWasPushed(int slot)
        + void UndoButtonWasPushed()
    }

    class Stereo
    {
        + Stereo(string location)
        + void On()
        + void Off()
        + void SetCD()
        + void setDVD()
        + void SetRadio()
        + void SetVolume(int volume)
    }
    class StereoOffCommand
    {
        + StereoOffCommand(Stereo stereo)
        + void Execute()
        + void Undo()
    }
    class StereoOnCommand
    {
        + StereoOnCommand(Stereo stereo)
        + void Execute()
        + void Undo()
    }
    class StereoOnWithCDCommand
    {
        + StereoOnWithCDCommand(Stereo stereo)
        + void Execute()
        + void Undo()
    }
    class TV
    {
        public TV(string location)
        public void On()
        public void Off()
        public void SetInputChannel()
    }
    class TVOffCommand
    {
        + TVOffCommand(TV tv)
        + void Execute()
        + void Undo()
    }
    class TVOnCommand
    {
        + TVOnCommand(TV tv)
        + void Execute()
        + void Undo()
    }
}
@enduml